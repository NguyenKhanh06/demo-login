{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ad\\\\Downloads\\\\google-auth-firebase-main\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext, useEffect, useState } from 'react';\nimport { GoogleAuthProvider, signInWithPopup, signInWithRedirect, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '../firebase';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState({});\n  const navigate = useNavigate();\n\n  const googleSignIn = () => {\n    // provider.setCustomParameters({\n    //   hd: \"fpt.edu.vn\"\n    // });\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider).then(result => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken; // The signed-in user info.\n\n      const user = result.user;\n      let regex = new RegExp(\"[a-z0-9]+@fpt.edu.vn\");\n      let regexfe = new RegExp(\"[a-z0-9]+@fe.edu.vn\");\n\n      if (!regex.test(user.email)) {\n        signOut(auth).then(setTimeout(() => {\n          alert(\"You are not allowed to\");\n        }, \"800\"));\n      } // navigate('/account');\n\n\n      console.log(credential); // ...\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message; // The email of the user's account used.\n\n      const email = error.customData.email; // The AuthCredential type that was used.\n\n      const credential = GoogleAuthProvider.credentialFromError(error); // ...\n    }); // signInWithRedirect(auth, provider)\n  };\n\n  const logOut = () => {\n    signOut(auth);\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, currentUser => {\n      setUser(currentUser);\n      console.log('User', currentUser);\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      googleSignIn,\n      logOut,\n      user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"CS/+sbWrftxgoO6YIJIYUuaOh2A=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthContextProvider;\nexport const UserAuth = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(UserAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c2 = UserAuth;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthContextProvider\");\n$RefreshReg$(_c2, \"UserAuth\");","map":{"version":3,"sources":["C:/Users/ad/Downloads/google-auth-firebase-main/src/context/AuthContext.js"],"names":["useContext","createContext","useEffect","useState","GoogleAuthProvider","signInWithPopup","signInWithRedirect","signOut","onAuthStateChanged","auth","useNavigate","AuthContext","AuthContextProvider","children","user","setUser","navigate","googleSignIn","provider","then","result","credential","credentialFromResult","token","accessToken","regex","RegExp","regexfe","test","email","setTimeout","alert","console","log","catch","error","errorCode","code","errorMessage","message","customData","credentialFromError","logOut","unsubscribe","currentUser","UserAuth"],"mappings":";;;;AAAA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SACEC,kBADF,EAEEC,eAFF,EAGEC,kBAHF,EAIEC,OAJF,EAKEC,kBALF,QAMO,eANP;AAOA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,WAAW,gBAAGV,aAAa,EAAjC;AAEA,OAAO,MAAMW,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACnD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMa,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,QAAMO,YAAY,GAAG,MAAM;AAEzB;AACA;AACA;AACA,UAAMC,QAAQ,GAAG,IAAId,kBAAJ,EAAjB;AACAC,IAAAA,eAAe,CAACI,IAAD,EAAOS,QAAP,CAAf,CACCC,IADD,CACOC,MAAD,IAAY;AAChB;AACA,YAAMC,UAAU,GAAGjB,kBAAkB,CAACkB,oBAAnB,CAAwCF,MAAxC,CAAnB;AACA,YAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHgB,CAIhB;;AACA,YAAMV,IAAI,GAAGM,MAAM,CAACN,IAApB;AACA,UAAIW,KAAK,GAAG,IAAIC,MAAJ,CAAW,sBAAX,CAAZ;AACA,UAAIC,OAAO,GAAG,IAAID,MAAJ,CAAW,qBAAX,CAAd;;AACA,UAAI,CAACD,KAAK,CAACG,IAAN,CAAWd,IAAI,CAACe,KAAhB,CAAL,EAA6B;AAC3BtB,QAAAA,OAAO,CAACE,IAAD,CAAP,CAAcU,IAAd,CAAqBW,UAAU,CAAC,MAAM;AACpCC,UAAAA,KAAK,CAAC,wBAAD,CAAL;AACA,SAF6B,EAE3B,KAF2B,CAA/B;AAID,OAbe,CAchB;;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,UAAZ,EAfgB,CAgBhB;AACD,KAlBD,EAkBGa,KAlBH,CAkBUC,KAAD,IAAW;AAClB;AACA,YAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,YAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHkB,CAIlB;;AACA,YAAMV,KAAK,GAAGM,KAAK,CAACK,UAAN,CAAiBX,KAA/B,CALkB,CAMlB;;AACA,YAAMR,UAAU,GAAGjB,kBAAkB,CAACqC,mBAAnB,CAAuCN,KAAvC,CAAnB,CAPkB,CAQlB;AACD,KA3BD,EANyB,CAmCzB;AAGD,GAtCD;;AAwCA,QAAMO,MAAM,GAAG,MAAM;AACjBnC,IAAAA,OAAO,CAACE,IAAD,CAAP;AACH,GAFD;;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyC,WAAW,GAAGnC,kBAAkB,CAACC,IAAD,EAAQmC,WAAD,IAAiB;AAC5D7B,MAAAA,OAAO,CAAC6B,WAAD,CAAP;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBW,WAApB;AACD,KAHqC,CAAtC;AAIA,WAAO,MAAM;AACXD,MAAAA,WAAW;AACZ,KAFD;AAGD,GARQ,EAQN,EARM,CAAT;AAUA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAE1B,MAAAA,YAAF;AAAgByB,MAAAA,MAAhB;AAAwB5B,MAAAA;AAAxB,KAA7B;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA/DM;;GAAMD,mB;UAEMF,W;;;KAFNE,mB;AAiEb,OAAO,MAAMiC,QAAQ,GAAG,MAAM;AAAA;;AAC5B,SAAO7C,UAAU,CAACW,WAAD,CAAjB;AACD,CAFM;;IAAMkC,Q;;MAAAA,Q","sourcesContent":["import { useContext, createContext, useEffect, useState } from 'react';\nimport {\n  GoogleAuthProvider,\n  signInWithPopup,\n  signInWithRedirect,\n  signOut,\n  onAuthStateChanged,\n} from 'firebase/auth';\nimport { auth } from '../firebase';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const AuthContextProvider = ({ children }) => {\n  const [user, setUser] = useState({});\n  const navigate = useNavigate();\n\n  const googleSignIn = () => {\n\n    // provider.setCustomParameters({\n    //   hd: \"fpt.edu.vn\"\n    // });\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider)\n    .then((result) => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      // The signed-in user info.\n      const user = result.user;\n      let regex = new RegExp(\"[a-z0-9]+@fpt.edu.vn\");\n      let regexfe = new RegExp(\"[a-z0-9]+@fe.edu.vn\");\n      if (!regex.test(user.email)) {\n        signOut(auth).then(  setTimeout(() => {\n          alert(\"You are not allowed to\");\n         }, \"800\"))\n      \n      }\n      // navigate('/account');\n      console.log(credential );\n      // ...\n    }).catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    });\n    \n    // signInWithRedirect(auth, provider)\n  \n\n  };\n\n  const logOut = () => {\n      signOut(auth)\n  }\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n      setUser(currentUser);\n      console.log('User', currentUser)\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ googleSignIn, logOut, user }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const UserAuth = () => {\n  return useContext(AuthContext);\n};\n"]},"metadata":{},"sourceType":"module"}