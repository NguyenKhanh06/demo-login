{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ad\\\\Downloads\\\\google-auth-firebase-main\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext, useEffect, useState } from 'react';\nimport { GoogleAuthProvider, signInWithPopup, signInWithRedirect, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState({});\n\n  const googleSignIn = () => {\n    // provider.setCustomParameters({\n    //   hd: \"fpt.edu.vn\"\n    // });\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider).then(result => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken; // The signed-in user info.\n\n      const user = result.user;\n      navigate('/account');\n      console.log(user); // ...\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message; // The email of the user's account used.\n\n      const email = error.customData.email; // The AuthCredential type that was used.\n\n      const credential = GoogleAuthProvider.credentialFromError(error); // ...\n    }); // signInWithRedirect(auth, provider)\n  };\n\n  const logOut = () => {\n    signOut(auth);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      googleSignIn,\n      logOut\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"cCRtNmj6gRKVA5wOmLEmdl385z4=\");\n\n_c = AuthContextProvider;\nexport const UserAuth = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(UserAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c2 = UserAuth;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthContextProvider\");\n$RefreshReg$(_c2, \"UserAuth\");","map":{"version":3,"sources":["C:/Users/ad/Downloads/google-auth-firebase-main/src/context/AuthContext.js"],"names":["useContext","createContext","useEffect","useState","GoogleAuthProvider","signInWithPopup","signInWithRedirect","signOut","onAuthStateChanged","auth","AuthContext","AuthContextProvider","children","user","setUser","googleSignIn","provider","then","result","credential","credentialFromResult","token","accessToken","navigate","console","log","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","logOut","UserAuth"],"mappings":";;;;AAAA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SACEC,kBADF,EAEEC,eAFF,EAGEC,kBAHF,EAIEC,OAJF,EAKEC,kBALF,QAMO,eANP;AAOA,SAASC,IAAT,QAAqB,aAArB;;AAEA,MAAMC,WAAW,gBAAGT,aAAa,EAAjC;AAEA,OAAO,MAAMU,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACnD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMY,YAAY,GAAG,MAAM;AACzB;AACA;AACA;AACA,UAAMC,QAAQ,GAAG,IAAIZ,kBAAJ,EAAjB;AACAC,IAAAA,eAAe,CAACI,IAAD,EAAOO,QAAP,CAAf,CACCC,IADD,CACOC,MAAD,IAAY;AAChB;AACA,YAAMC,UAAU,GAAGf,kBAAkB,CAACgB,oBAAnB,CAAwCF,MAAxC,CAAnB;AACA,YAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHgB,CAIhB;;AACA,YAAMT,IAAI,GAAGK,MAAM,CAACL,IAApB;AACAU,MAAAA,QAAQ,CAAC,UAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ,EAPgB,CAQhB;AACD,KAVD,EAUGa,KAVH,CAUUC,KAAD,IAAW;AAClB;AACA,YAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,YAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHkB,CAIlB;;AACA,YAAMC,KAAK,GAAGL,KAAK,CAACM,UAAN,CAAiBD,KAA/B,CALkB,CAMlB;;AACA,YAAMb,UAAU,GAAGf,kBAAkB,CAAC8B,mBAAnB,CAAuCP,KAAvC,CAAnB,CAPkB,CAQlB;AACD,KAnBD,EALyB,CA0BzB;AAGD,GA7BD;;AA+BA,QAAMQ,MAAM,GAAG,MAAM;AACjB5B,IAAAA,OAAO,CAACE,IAAD,CAAP;AACH,GAFD;;AAKA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEM,MAAAA,YAAF;AAAgBoB,MAAAA;AAAhB,KAA7B;AAAA,cACGvB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5CM;;GAAMD,mB;;KAAAA,mB;AA8Cb,OAAO,MAAMyB,QAAQ,GAAG,MAAM;AAAA;;AAC5B,SAAOpC,UAAU,CAACU,WAAD,CAAjB;AACD,CAFM;;IAAM0B,Q;;MAAAA,Q","sourcesContent":["import { useContext, createContext, useEffect, useState } from 'react';\nimport {\n  GoogleAuthProvider,\n  signInWithPopup,\n  signInWithRedirect,\n  signOut,\n  onAuthStateChanged,\n} from 'firebase/auth';\nimport { auth } from '../firebase';\n\nconst AuthContext = createContext();\n\nexport const AuthContextProvider = ({ children }) => {\n  const [user, setUser] = useState({});\n\n  const googleSignIn = () => {\n    // provider.setCustomParameters({\n    //   hd: \"fpt.edu.vn\"\n    // });\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider)\n    .then((result) => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      // The signed-in user info.\n      const user = result.user;\n      navigate('/account');\n      console.log(user);\n      // ...\n    }).catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    });\n    \n    // signInWithRedirect(auth, provider)\n  \n\n  };\n\n  const logOut = () => {\n      signOut(auth)\n  }\n\n\n  return (\n    <AuthContext.Provider value={{ googleSignIn, logOut}}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const UserAuth = () => {\n  return useContext(AuthContext);\n};\n"]},"metadata":{},"sourceType":"module"}